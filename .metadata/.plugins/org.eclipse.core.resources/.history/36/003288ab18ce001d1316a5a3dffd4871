package com.stock.marketing.controller;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.stock.marketing.entity.Company;
import com.stock.marketing.service.CompanyService;

@RestController
@CrossOrigin("*")
public class CompanyController {

	@Autowired
	CompanyService companyService;
	
	@Autowired
	RestTemplate restTemplate;
	
	@Value("${stock.delete.url}")
	private String url;
	

	@PostMapping("company/register")
	public ResponseEntity<Company> addCompany(@RequestBody Company company) {
		System.out.println("Company Registration Detail is-->" + company);
		Company addedCompanyDetails = companyService.addCompanyDetails(company);
		if(addedCompanyDetails != null)
			return new ResponseEntity<Company>(addedCompanyDetails, HttpStatus.CREATED);
		else
			return new ResponseEntity<Company>(addedCompanyDetails,HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@GetMapping("company/getall")
	public ResponseEntity<List<Company>> viewAllCompany() {
		 List<Company> allCompanyDetails = companyService.viewAllCompanyDetails();
		 if(allCompanyDetails.size()>0)
			 return new ResponseEntity<List<Company>>(allCompanyDetails,HttpStatus.OK);
		 else
			 return new ResponseEntity<List<Company>>(allCompanyDetails,HttpStatus.NOT_FOUND);
	}

	@GetMapping("company/info/{id}")
	public ResponseEntity<Optional<Company>> viewCompanybyId(@PathVariable String id) {
		 Optional<Company> companyDetailsById = companyService.viewCompanyDetailsById(id);
		if(companyDetailsById.isPresent())
			return new ResponseEntity<Optional<Company>>(companyDetailsById,HttpStatus.OK);
		 else
			 return new ResponseEntity<Optional<Company>>(companyDetailsById,HttpStatus.NOT_FOUND);
	}

	@DeleteMapping("company/delete/{id}")
	public ResponseEntity deleteCompanyById(@PathVariable String id) {
		System.out.println("Inside deleteCompanyById");
		//delete comoany details from company table
		if(companyService.deleteCompanyById(id))
		{
			//also delete respective company stock details from stock table
			//stockService.deleteStockById(id);
			try {
				System.out.println("Inside delete stock try");
				HttpEntity entity = new HttpEntity(null);
				restTemplate.exchange(url+id, HttpMethod.DELETE, entity, Integer.class);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			 
		
			return new ResponseEntity(HttpStatus.OK);
		}
		else
			return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
//	@GetMapping("company/getCompany/{id}")
//	public ResponseEntity<Optional<Company>> getCompanybyId(@PathVariable String id) {
//		 Optional<Company> companyDetailsById = companyService.viewCompanyDetailsById(id);
//		if(companyDetailsById.isPresent())
//			return new ResponseEntity<Optional<Company>>(companyDetailsById,HttpStatus.OK);
//		 else
//			 return new ResponseEntity<Optional<Company>>(companyDetailsById,HttpStatus.NOT_FOUND);
//	}
	
	@PutMapping("company/update")
	@Transactional
	public boolean updateCompany(Company company) {
		 return companyService.updateCompany(company);
		
	}
}